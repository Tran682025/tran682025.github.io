// Kh·ªüi t·∫°o Pi SDK ·ªü ch·∫ø ƒë·ªô th·ª≠ nghi·ªám (sandbox)
Pi.init({ version: "2.0", sandbox: true });

// H√†m render h·ª£p √¢m
function renderChords(chords) {
  const container = document.getElementById("chords");
  container.innerHTML = ""; // X√≥a n·ªôi dung c≈©
  chords.forEach(chord => {
    const el = document.createElement("div");
    el.innerHTML = `<strong>${chord.name}</strong>: ${chord.fingering}`;
    container.appendChild(el);
  });
}

// H√†m ƒëƒÉng nh·∫≠p
function login() {
  const scopes = ['username', 'payments'];
  Pi.authenticate(scopes, function(payment) {
    console.log("Incomplete payment found:", payment);
  }).then(function(auth) {
    console.log("Authentication success", auth);
    alert("Xin ch√†o, " + auth.user.username + " üëã");

    // Sau khi ƒëƒÉng nh·∫≠p th√†nh c√¥ng, fetch h·ª£p √¢m
    fetch('basic.json')
      .then(response => response.json())
      .then(data => {
        renderChords(data);
      })
      .catch(error => {
        console.error("L·ªói khi l·∫•y h·ª£p √¢m:", error);
      });

  }).catch(function(error) {
    console.error("Authentication failed:", error);
    alert("ƒêƒÉng nh·∫≠p th·∫•t b·∫°i üò•");
  });
}

// H√†m mua Premium
function payPremium() {
  Pi.createPayment({
    amount: 1,
    memo: "Pichordify Premium Access",
    metadata: { type: "premium", item: "access" }
  }, {
    onReadyForServerApproval: function(paymentId) {
      console.log("S·∫µn s√†ng duy·ªát:", paymentId);
      alert("Thanh to√°n th·ª≠ nghi·ªám kh·ªüi t·∫°o ‚úîÔ∏è");
    },
    onReadyForServerCompletion: function(paymentId, txid) {
      console.log("S·∫µn s√†ng ho√†n t·∫•t:", paymentId, txid);
      alert("ƒê√£ ho√†n t·∫•t thanh to√°n th·ª≠ nghi·ªám üéâ");
    },
    onCancel: function(paymentId) {
      alert("B·∫°n ƒë√£ h·ªßy thanh to√°n.");
    },
    onError: function(error, paymentId) {
      alert("L·ªói thanh to√°n: " + error);
    }
  });
}
